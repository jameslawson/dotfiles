# +----------------------------------
# | Author: James Lawson
# | Licence: MIT
# +----------------------------------

# ----------------------------------------------------------
# -- DEPENDENCIES
# ----------------------------------------------------------
# -- [1] rettach-to-user-namespace wrapper
#        allow copying and pasting in OSX
#        $ brew install reattach-to-user-namespace
# more info: http://stackoverflow.com/questions/14041263/cutting-and-pasting-from-vim-and-tmux
# more info: https://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#
# -- [2] vim-tmux-navigator needs to be installed as a vim plugin
# more info: https://github.com/christoomey/vim-tmux-navigator

# ----------------------------------------------------------
# -- GLOBALS
# ----------------------------------------------------------

# -- import the powerline plugin from pip package
#    currently disabled
# source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

# -- prefix (leader) key
#    set backtick as the prefix
#    removing the default of CTRL+B
unbind C-b
set -g prefix `

# -- reload config
bind-key r source-file ~/.tmux.conf\; display-message '~/.tmux.conf reloaded successfully'

# -- set the base index for panes and windows
#    to be from 1, rather than from 0
#    (0 is too far away on the keyboard)
set -g base-index 1
set -g pane-base-index 1

# ----------------------------------------------------------
# -- APPEARANCE
# ----------------------------------------------------------

# -- change status bar colours
set -g status-bg '#333333'
set -g status-fg '#AAAAAA'

# -- set the title bar
set -g set-titles on

# -- fix vim color scheme messing up
#    (fix black status bar)
set -g default-terminal "screen-256color"

# -- increase character limit for left area of status
#    from the default of 10 to 50. makes it easier to
#    see session names (prevent them from being truncated)
set -g status-left-length 50

set -g status-right 'Pane: #P'

# -- fix copy/paste issues surrounding vim+tmux
#    and the use of clipboard=unnamed
#    requires reattach-to-user-namespace wrapper to be installed [1]
set -g default-command 'reattach-to-user-namespace -l zsh'

# -- for getting CTRL+ENTER and the like
#    to work in vim
set -g xterm-keys on

# -- don't ever send prefix through to process running
#    in current pane. uncomment line below if we want two consecutive
#    presses of the prefix to send one prefix through
# bind , send-prefix

# -- put a red border around active pane
set -g pane-active-border-fg red

# ----------------------------------------------------------
# -- PANE BEHAVIOUR
# ----------------------------------------------------------

# -- cycle through panes
#    use backtick-backtick
bind-key ` select-pane -t :.+

# -- create a new pane.
#    the current pane is split into two
#    make the cut vertically (use the pipe key | i.e. \)
#    make the cut horizontally (use the - key)
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'

# -- zoom current pane
#    make it fullscreen; hiding other panes
#    use backtick-z
bind-key z resize-pane -Z

# -- pane resizing
#    use backtick-uparrow, backtick-leftarrow,
#    backtick-rightarrow, backtick-downarrow to change
#    the size of a pane by 5 units
bind Left resize-pane -L 5
bind Down resize-pane -D 5
bind Up resize-pane -U 5
bind Right resize-pane -R 5

# -- close a pane
bind-key x kill-pane

# -- pane navigation
#    use vim style (i.e. using hjkl)
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key h
bind-key h select-pane -L
unbind-key l
bind-key l select-pane -R

# -- vim-tmux-navigator
#    pane navigation with awareness of vim splits
#    needs vim plugin [2]
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind ` if-shell "$is_vim" "send-keys zz" "select-pane -t :.+"

# ----------------------------------------------------------
# -- WINDOW BEHAVIOUR
# ----------------------------------------------------------

# -- create a new window
bind c new-window -c "#{pane_current_path}"

# -- go to next window
bind n next-window

# -- break a pane into a new window
bind b break-pane

# ----------------------------------------------------------
# -- SESSIONS
# ----------------------------------------------------------

# -- show all sessions
bind C-j choose-tree

# ----------------------------------------------------------
# -- SHORTCUTS
# ----------------------------------------------------------

bind-key h split-window -h "htop"
